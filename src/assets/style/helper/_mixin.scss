
//rem calculate
@mixin remCalc($property,$px-values,$baseline-px:16px) {
  //转换为 rem
  $baseline-rem: $baseline-px / 1rem * 1;
  @if type-of($px-values) == "number" {
    #{$property}: $px-values / $baseline-rem;
  } @else {
    $rem-values: ();
    @each $value in $px-values {
      $rem-values: append($rem-values, $value / $baseline-rem);
    }
    #{$property}: $rem-values;
  }
}

// Clearfix
@mixin clearfix() {
  .clearfix {
    zoom: 1;
    &:before,
    &:after {
      content: " ";
      display: table;
    }
    &:after {
      clear: both;
      visibility: hidden;
      font-size: 0;
      height: 0;
    }
  }
}

// Sizing
// -----------------------------------------------------------------------------
@mixin size($width, $height) {
  width: $width;
  height: $height;
}

@mixin square($size) {
  @include size($size, $size);
}

// TODO: add scrollableX & scrollableY
@mixin scrollable() {
  overflow: auto;
  -webkit-overflow-scrolling: touch;
}

// Text
// -----------------------------------------------------------------------------

// Text overflow
// Requires inline-block or block for proper styling
@mixin text-overflow {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

// Line clamp
@mixin line-clamp($lines: 2, $line-height: 1.5em) {
  text-overflow: ellipsis;
  display: -webkit-box;
  -webkit-box-orient: vertical;
  -webkit-line-clamp: $lines; // number of lines to show
  overflow: hidden;
  line-height: $line-height;
  max-height: $line-height * $lines;
}

// Form
// -----------------------------------------------------------------------------

// Disable OS-level styles
@mixin no-appearance {
  -webkit-appearance: none;
  -moz-appearance: none;
}

// Shape
// -----------------------------------------------------------------------------
/// CSS Triangle
/// Creates a CSS triangle, which can be used for dropdown arrows, popup tails, and more. Use this mixin inside a `&::before` or `&::after` selector, to attach the triangle to an existing element.
///
/// @param {number} $triangle-size - Width of the triangle.
/// @param {color} $triangle-color - Color of the triangle.
/// @param {keyword} $triangle-direction - Direction the triangle points. Can be `top`, `right`, `bottom`, or `left`.
@mixin css-triangle($triangle-size, $triangle-color, $triangle-direction) {
  content: "";
  display: block;
  width: 0;
  height: 0;
  border: inset $triangle-size;
  @if ($triangle-direction == top) {
    border-color: $triangle-color transparent transparent transparent;
    border-top-style: solid;
  }
  @if ($triangle-direction == bottom) {
    border-color: transparent transparent $triangle-color transparent;
    border-bottom-style: solid;
  }
  @if ($triangle-direction == left) {
    border-color: transparent transparent transparent $triangle-color;
    border-left-style: solid;
  }
  @if ($triangle-direction == right) {
    border-color: transparent $triangle-color transparent transparent;
    border-right-style: solid;
  }
}

// Retina borders @see http://dieulot.net/css-retina-hairline
@mixin retina-border-top($color: #c4c4c4) {
  position: relative;

  &::before {
    content: "";
    top: 0;
    left: 0;
    position: absolute;
    display: block;
    @include size(100%, 1px);
    background-color: $color;
  }

  // simulate a 1px border on retina screens
  @media (-webkit-min-device-pixel-ratio: 2) {
    &::before {
      transform: scaleY(0.5);
      transform-origin: 50% 0;
    }
  }
}

@mixin retina-border-bottom($color: #c4c4c4) {
  position: relative;

  &::after {
    content: "";
    bottom: 0;
    left: 0;
    position: absolute;
    display: block;
    @include size(100%, 1px);
    background-color: $color;
    backface-visibility: hidden;
  }

  // simulate a 1px border on retina screens
  @media (-webkit-min-device-pixel-ratio: 2) {
    &::after {
      transform: scaleY(0.5);
      transform-origin: 50% 100%;
    }
  }
}

// Browser compatibility
// -----------------------------------------------------------------------------

// FUCK Android UC class namespace
$legacy-android-uc: 'ua-stupid-uc';

// 在安卓里 flex 里的子元素一定要是 block 元素，如果用行内元素 可以用flex-inline。
// (不过 flex-inline 兼容也不好，所以全改成块元素就好了)
// @see https://github.com/amazeui/amazeui-touch/issues/12#issuecomment-169879658
@mixin fixes-flexbox-for-andriod {
  display: block;
}

// flex-basis fallback
@mixin flex-basis-fallback($width) {
  @if $legacyFlexBoxSupport {
    .#{$legacy-android-uc} & {
      width: $width;
    }
  }
}

// 安卓 UC UA 检测
// - 解决 NavBar `.navbar-nav-item` 使用 inline-flex 以后宽度异常问题
// - 测试环境：MI4 / Android 6.0.1 / MIUI 7 6.4.14 开发版
// - 负面影响: 产生左侧的链接 icon 和 tile 顺序不对（`order` 失效）问题 -> JS 中已调整顺序
@mixin navbar-item-android-uc-fallback() {
  @if $legacyFlexBoxSupport {
    .#{$legacy-android-uc} & {
      display: inline-block;
    }
  }
}
// -----------------------------------------------------------------------------




//布局居中
@mixin layout-center ($width:false,$height:false) {
  position: absolute;
  @if($width){
    //兼容IE
    width:$width;
    height: $height;
    top:0;
    left:0;
    right:0;
    bottom: 0;
    margin: auto;
  }@else{
    //css3
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  }
}


@mixin setTopLine($c:#C7C7C7, $height:1px,$useBack:false) {
  content: " ";
  position: absolute;
  left: 0;
  top: 0;
  width: 100%;
  height: $height;
  border-top: 1px solid $c;
  color: $c;
  @if($useBack){
    background: $c;
  }@else {
    border-top: 1px solid $c;
    transform-origin: 0 0;
    transform: scaleY(0.5);
  }
}

@mixin setBottomLine($c:#C7C7C7, $height:1px,$useBack:false) {
  content: " ";
  position: absolute;
  left: 0;
  bottom: 0;
  width: 100%;
  height: $height;
  color: $c;
  @if($useBack){
    background: $c;
  }@else {
    border-bottom: 1px solid $c;
    transform-origin: 0 100%;
    transform: scaleY(0.5);
  }
}

@mixin setLeftLine($c:#C7C7C7, $width:1px,$useBack:false) {
  content: " ";
  position: absolute;
  left: 0;
  top: 0;
  width: $width;
  height: 100%;
  color: $c;
  @if($useBack){
    background: $c;
  }@else {
    border-left: 1px solid $c;
    transform-origin: 0 0;
    transform: scaleX(0.5);
  }
}

@mixin setRightLine($c:#C7C7C7, $width:1px,$useBack:false) {
  content: " ";
  position: absolute;
  right: 0;
  top: 0;
  width: $width;
  height: 100%;
  color: $c;
  @if($useBack){
    background: $c;
  }@else {
    border-right: 1px solid $c;
    transform-origin: 100% 0;
    transform: scaleX(0.5);
  }
}


//@mixin setBorderRadius($dir:'all') {
//  @if($dir == 'left'){
//    border-bottom-#{$dir}-radius: 14px;
//    border-top-#{$dir}-radius: 14px;
//  }
//
//  @if($dir == 'top'){
//    border-#{$dir}-left-radius: 14px;
//    border-#{$dir}-right-radius: 14px;
//  }
//}
